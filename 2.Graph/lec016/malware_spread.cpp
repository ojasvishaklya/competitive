#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution
{
public:
    vector<int> parent;
    int find(int n)
    {
        if (parent[n] == n)
            return n;
        else
            return parent[n] = find(parent[n]);
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();

        for (int i = 0; i < n; i++)
        {
            parent.push_back(i);
        }
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
            {
                if (i != j && graph[i][j] == 1)
                {
                    int p1 = find(i);
                    int p2 = find(j);

                    if (p1 != p2)
                    {
                        parent[p1] = min(p1, p2);
                        parent[p2] = min(p1, p2);
                    }
                }
            }

        vector<int> population(n, 0); //number of people in a particular country

        for (int i = 0; i < n; i++)
        {
            cout << i << "->" << parent[i] << endl;
            population[parent[i]]++;
        }
        sort(initial.begin(), initial.end());
        vector<int> infected(n, 0); //number of infected patients in a particular country

        for (int i = 0; i < initial.size(); i++)
            infected[parent[initial[i]]]++;

        for (int i = 0; i < n; i++)
            cout << i << "->population->" << population[i] << "->infected->" << infected[i] << endl;

        int ans = initial[0];
        int max = 0; //total number of healed patients
        for (int i = 0; i < initial.size(); i++)
        {
            if (infected[parent[initial[i]]] == 1 && population[parent[initial[i]]] > max)
            {
                max = population[parent[initial[i]]];
                ans = initial[i];
            }
        }

        return ans;
    }
};